{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","input","useRef","onSubmit","e","preventDefault","trim","length","categories","current","value","ref","type","placeholder","onChange","target","GifGridItem","category","title","url","repTitle","toUpperCase","className","src","alt","getGifs","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"oMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAExCC,EAAQC,iBAAO,MAYrB,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCN,EAAWO,OAAOC,SACjBV,GAAc,SAACW,GAAD,OAAiBT,GAAjB,mBAAgCS,OAC9CR,EAAc,IACdC,EAAMQ,QAAQC,MAAM,KAIxB,SACI,uBACIC,IAAKV,EACLW,KAAK,OACLC,YAAY,eACZC,SAjBc,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACzBf,EAAce,EAAOL,a,OCNhBM,EAAc,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACpCC,EAAY,UAAGH,EAAH,UAAqBI,cACvC,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,4BAAKA,GAAgBE,Q,uBCJpBK,EAAO,uCAAG,WAAOR,GAAP,uBAAAS,EAAA,6DAEbP,EAFa,iDAEoCQ,UAAUV,GAF9C,6BAFP,oCAEO,SAGAW,MAAOT,GAHP,cAGbU,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRjB,MAAOgB,EAAIhB,MACXC,IAAKe,EAAIE,OAAOC,iBAAiBlB,QAVtB,kBAcZa,GAdY,4CAAH,sDCCPM,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EAEZnB,mBAAS,CAC/BiC,KAAM,GACNQ,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAqBtC,OAdAC,qBAAU,WACND,GAAS,SAACD,GAAD,mBAAC,eACHA,GADE,IAELD,SAAS,OAEbd,EAAQR,GACC0B,MAAK,SAACP,GACHK,EAAS,CACLV,KAAMK,EACNG,SAAS,SAG1B,CAACtB,IAEGuB,EDjB0BI,CAAa3B,GAAjCmB,EAFwB,EAE7BL,KAAaQ,EAFgB,EAEhBA,QAErB,OACI,qCACI,oBAAIjB,UAAU,8CAAd,SAA8DL,IAE5DsB,GAAW,mBAAGjB,UAAU,oCAAb,qBAEb,qBAAKA,UAAU,8CAAf,SAEQc,EAAOH,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,aAEIjB,SAAUA,GACNiB,GAFCA,EAAIC,aEQtBU,EAtBa,WAAO,IAAD,EAEM/C,mBAAS,CAAC,eAFhB,mBAEvBU,EAFuB,KAEXX,EAFW,KAI9B,OACI,qCACI,2CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,8BACKW,EAAWyB,KAAI,SAAChB,GAAD,OACZ,cAAC,EAAD,CAEIA,SAAUA,GADJA,Y,MCR9B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8739e02f.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const input = useRef(null);\r\n    const handleInputChange = ({ target }) => {\r\n        setInputValue(target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length) {\r\n            setCategories((categories) => [inputValue, ...categories]);\r\n            setInputValue('');\r\n            input.current.value='';\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                ref={input}\r\n                type=\"text\"\r\n                placeholder=\"Add Category\"\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({category, title, url}) => {\r\n    const repTitle =  `${category } - gif`.toUpperCase();\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{ title ? title : repTitle }</p>\r\n        </div>\r\n    )\r\n}\r\n","// Api key for Giphy\r\nconst api_key = 'GyTgDRvJi4SIjxKQSRDSKA5CNussIOTV';\r\n\r\nexport const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${api_key}`;\r\n    const resp = await fetch( url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    \r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"card-grid animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            { loading && <p className=\"card-grid animate__animated flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid animate__animated animate__fadeIn\">\r\n                { \r\n                    images.map((img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            category={category}\r\n                            {...img}\r\n                        />\r\n                        // img={img}\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState((state) => ({\r\n            ...state,\r\n            loading: false\r\n        }));\r\n        getGifs(category)\r\n                .then((images) => {\r\n                    setState({\r\n                        data: images,\r\n                        loading: false\r\n                    })\r\n                });\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Fire Force']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpert</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <div>\r\n                {categories.map((category) => (\r\n                    <GifGrid\r\n                        key={ category }\r\n                        category={category}\r\n                    />\r\n                ))}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Components\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}